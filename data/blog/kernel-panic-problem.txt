# Kernel Panic 相關解決

## kernel panic 錯誤表現

> success
> kernel panic 主要有以下幾個出錯提示：
> 1. Kernel panic-not syncing fatal exception in interrupt
> 2. kernel panic - not syncing: Attempted to kill the idle task!
> 3. kernel panic - not syncing: killing interrupt handler!
> 4. Kernel Panic - not syncing：Attempted to kill init !

從其他原始檔和相關文件看到應該有幾種原因：

### 1、硬體問題

使用了 SCSI-device 並且使用了未知命令。

```c
# WDIOS_TEMPPANIC Kernel panic on temperature trip
# 
# The SETOPTIONS call can be used to enable and disable the card
# and to ask the driver to call panic if the system overheats.
# 
# If one uses a SCSI-device of unsupported type/commands, one
# immediately runs into a kernel-panic caused by Command Error. To better
# understand which SCSI-command caused the problem, I extended this
# specific panic-message slightly.
# 
# read/write causes a command error from
# the subsystem and this causes kernel-panic
```

### 2、系統過熱

如果系統過熱會呼叫 panic，系統掛起。

```c
# WDIOS_TEMPPANIC Kernel panic on temperature trip
# 
# The SETOPTIONS call can be used to enable and disable the card
# and to ask the driver to call panic if the system overheats.
```

### 3、檔案系統引起

```c
# A variety of panics and hangs with /tmp on a reiserfs filesystem
# Any other panic, hang, or strange behavior
#
# It turns out that there's a limit of six environment variables on the
# kernel command line. When that limit is reached or exceeded, argument
# processing stops, which means that the 'root=' argument that UML
# usually adds is not seen. So, the filesystem has no idea what the
# root device is, so it panics.
# The fix is to put less stuff on the command line. Glomming all your
# setup variables into one is probably the best way to Go.
```
Linux 核心命令列有 6 個環境變數。如果即將達到或者已經超過了的話 `root=` 引數會沒有傳進去，啟動時會引發 panics 錯誤。

`vi grub.conf`
```grub
#####################
title Red Hat Enterprise Linux AS (2.6.9-67.0.15.ELsmp)
root (hd0,0)
kernel /boot/vmlinuz-2.6.9-67.0.15.ELsmp ro root=LABEL=/
initrd /boot/initrd-2.6.9-67.0.15.ELsmp.img
title Red Hat Enterprise Linux AS-up (2.6.9-67.EL)
root (hd0,0)
kernel /boot/vmlinuz-2.6.9-67.EL ro root=LABEL=/
initrd /boot/initrd-2.6.9-67.EL.img
```
應該是其中的 `root=LABEL=/` 沒有起作用。

### 4、核心更新

網上相關文件多半是因為升級核心引起的，建議使用官方標準版、穩定版。
另外還有使用磁碟的 LVM 邏輯卷，新增 CPU 和記憶體。可在 BIOS 中禁掉音效卡驅動等不必要的裝置。也有報是 ext3 檔案系統的問題。
解決： 手工編譯核心，把 ext3 相關的模組都編譯進去。

### 5、處理 panic 後的系統自動重啟

`panic.c` 原始檔有個方法，當 panic 掛起後，指定超時時間，可以重新啟動機器。
```c
if (panic_timeout > 0)
{
    int i;
    /*
    * Delay timeout seconds before rebooting the machine.
    * We can't use the "normal" timers since we just panicked..
    */
    printk(KERN_EMERG "Rebooting in %d seconds..",panic_timeout);
    for (i = 0; i < panic_timeout; i++) {
        touch_nmi_watchdog();
        mdelay(1000);
    }
}
```

#### 修改方法：

在 `/etc/sysctl.conf` 檔案中加入：
```
kernel.panic = 30 #panic錯誤中自動重啟，等待時間為30秒
kernel.sysrq=1 #啟用Magic SysRq！ 否則，鍵盤滑鼠沒有響應
```

**Linux Kernel Panic 之後的招數**

你可以在 `/etc/sysctl.conf` 檔案中加入 `kernel.panic = 20` 來告訴系統從 Panic 錯誤中自動重啟，等待時間為 20 秒！這個由管理員自己設定！
另外一個討厭的事情是系統 hung 住之後，鍵盤滑鼠沒有響應，這個可以通過設定 Magic SysRq 來試著解決，也是在 `/etc/sysctl.conf` 中，`kernel.sysrq=1` 來啟用 Magic SysRq！

這樣在掛住的時候至少還有一招可以使，按住 `[ALT]+[SysRq]+[COMMAND]`, 這裡 SysRq 是 Print SCR 鍵，而 COMMAND 按以下來解釋！
- b - 立即重啟
- e - 傳送 SIGTERM 給 init 之外的系統程序
- o - 關機
- s - sync 同步所有的檔案系統
- u - 試圖重新掛載檔案系統

當然，誰也不希望經常用到這些招數！:O，有備無患而已。

### Kernel panic 問題如何除錯

Linux kernel panic 是很難定位和排查的重大故障,一旦系統發生了 kernel panic，相關的日誌資訊非常少，而一種常見的排查方法—重現法–又很難實現，因此遇到 kernel panic 的問題，一般比較頭疼。

#### 什麼是 kernel panic

它表示 Linux kernel 走到了一個不知道該怎麼走下一步的狀況。有兩種主要型別 kernel panic：
1. hard panic (也就是 Aieee 資訊輸出)
2. soft panic (也就是 Oops 資訊輸出)

#### 什麼能導致 kernel panic

只有載入到核心空間的驅動模組才能直接導致 kernel panic。

#### 如何排查 hard panic

一般出現下面的情況，就認為是發生了 kernel panic:
- 機器徹底被鎖定，不能使用
- 數字鍵(Num Lock)，大寫鎖定鍵(Caps Lock)，滾動鎖定鍵(Scroll Lock)不停閃爍。
- 如果在終端下，應該可以看到核心 dump 出來的資訊
- 和 Windows 藍屏相似

**原因：**
對於 hard panic 而言，最大的可能性是驅動模組的中斷處理 (interrupt handler) 導致的，一般是因為驅動模組在中斷處理程式中訪問一個空指標 (null pointre)。

**資訊收集**
- `/var/log/messages`: 幸運的時候，整個 kernel panic 棧跟蹤資訊都能記錄在這裡。
- 應用程式/庫 日誌: 可能可以從這些日誌資訊裡能看到發生 panic 之前發生了什麼。
- 終端螢幕 dump 資訊。

**完整棧跟蹤資訊的排查方法**
棧跟蹤資訊 (stack trace) 是排查 kernel panic 最重要的資訊。要確認是否有一個足夠的棧跟蹤資訊，你只要查詢包含 ”EIP” 的一行，它顯示了是什麼函式和模組呼叫時導致 panic。大概就像下面這個例子一樣：
```log
EIP is at _dlgn_setevmask [streams-dlgnDriver] 0xe
```

#### 如何排查 soft panic

**症狀：**
- 沒有 hard panic 嚴重
- 通常導致段錯誤 (segmentation fault)
- 可以看到一個 oops 資訊，`/var/log/messages` 裡可以搜尋到 ’Oops’
- 機器稍微還能用（但是收集資訊後，應該重啟系統）

**原因：**
凡是非中斷處理引發的模組崩潰都將導致 soft panic。

**資訊收集：**
當 soft panic 發生時，核心將產生一個包含核心符號 (kernel symbols) 資訊的 dump 資料，這個將記錄在 `/var/log/messages` 裡。為了開始排查故障，可以使用 `ksymoops` 工具來把核心符號資訊轉成有意義的資料。

#### 案例分析：

安裝 linux 出現 “Kernel panic-not syncing fatal exception in interrupt” 是由於網絡卡驅動原因。
解決方法：將選項 “Onboard Lan” 的選項 “Disabled”, 重啟從光碟機啟動即可。

---

分析 kernel panic 比較關鍵的就是看三點：
1.  看 pc 指標的值
2.  看呼叫棧 Call Trace

```log
Unable to handle kernel paging request at virtual address bc21840c
pgd = c0004000
[bc21840c] *pgd=00000000
Internal error: Oops: 5 [#1] SMP ARM
Modules linked in: tntfs(PO) ahci_platform libahci_platform libahci xhci_plat_hcd ohci_platform ehci_platform hi_cimaxplus hi_ci hi_pmoc hi_vi hi_sci hi_keyled hi_aenc hi_venc hi_png hi_jpge hi_jpeg hi_ir hi_dbe mali_kbase kds hi_fb hi_tuner hi_mce hi_pvr hi_sync hi_aiao hi_adsp hi_cipher hi_vdec hi_vpss hi_vfmw hi_adec hi_demux hi_otp hi_tde hi_i2c hi_gpio_i2c hi_gpio hi_vou hi_hdmi hi_pq hi_pdm hi_common hi_mmz hi_media
CPU: 1 PID: 0 Comm: swapper/1 Tainted: P O 3.18.24_hi3798cv2x #1
task: de462880 ti: de4c6000 task.ti: de4c6000
PC is at scheduler_tick+0x98/0xec
LR is at 0x1e1c8000
pc : [] lr : [<1e1c8000>] psr: 60030193
sp : de4c7de0 ip : 00000000 fp : de4c7dfc
r10: debc8478 r9 : c0087c64 r8 : de4c7ea8
r7 : 00000001 r6 : 00000000 r5 : de462880 r4 : de4c6000
r3 : bc217fc0 r2 : ddd51fc0 r1 : 00000000 r0 : 000061aa
Flags: nZCv IRQs off FIQs on Mode SVC_32 ISA ARM Segment kernel
Control: 10c5383d Table: 1c4d406a DAC: 00000015

PC: 0xc004ed98:
ed98 e3c33d7f e59f80c0 e3c3303f e59f40bc e5939014 e1a06004 e7987109 e0865007
edb8 e1a00005 e595a44c eb19ce04 e595302c e3530000 da000021 e59a3040 e1a0100a
edd8 e3a02000 e1a00005 e5933044 e12fff33 e1a00005 eb001063 f57ff05b e19630b7
...
---[ end Kernel panic - not syncing: Fatal exception in interrupt
